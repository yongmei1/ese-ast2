TranslationUnitDecl 0x3599b60 <<invalid sloc>> <invalid sloc>
|-TypedefDecl 0x359a058 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'
| `-BuiltinType 0x3599db0 '__int128'
|-TypedefDecl 0x359a0b8 <<invalid sloc>> <invalid sloc> implicit __uint128_t 'unsigned __int128'
| `-BuiltinType 0x3599dd0 'unsigned __int128'
|-TypedefDecl 0x359a148 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'
| `-PointerType 0x359a110 'char *'
|   `-BuiltinType 0x3599bf0 'char'
|-TypedefDecl 0x359a3f8 <<invalid sloc>> <invalid sloc> implicit __builtin_va_list 'struct __va_list_tag [1]'
| `-ConstantArrayType 0x359a3a0 'struct __va_list_tag [1]' 1 
|   `-RecordType 0x359a220 'struct __va_list_tag'
|     `-Record 0x359a198 '__va_list_tag'
`-FunctionDecl 0x359a498 </home/paul/clang-ast/while2.c:1:1, line:10:1> line:1:1 fred 'int ()'
  `-CompoundStmt 0x35e5f80 <col:7, line:10:1>
    |-DeclStmt 0x359a5f0 <line:2:1, col:6>
    | `-VarDecl 0x359a590 <col:1, col:5> col:5 used y 'int'
    |-DeclStmt 0x359a678 <line:3:1, col:6>
    | `-VarDecl 0x359a618 <col:1, col:5> col:5 used x 'int'
    |-BinaryOperator 0x359a6d8 <line:4:1, col:3> 'int' '='
    | |-DeclRefExpr 0x359a690 <col:1> 'int' lvalue Var 0x359a590 'y' 'int'
    | `-IntegerLiteral 0x359a6b8 <col:3> 'int' 9
    |-BinaryOperator 0x359a748 <line:5:1, col:3> 'int' '='
    | |-DeclRefExpr 0x359a700 <col:1> 'int' lvalue Var 0x359a618 'x' 'int'
    | `-IntegerLiteral 0x359a728 <col:3> 'int' 4
    `-WhileStmt 0x35e5f60 <line:6:1, line:9:1>
      |-<<<NULL>>>
      |-BinaryOperator 0x359a7d0 <line:6:8, col:10> 'int' '>'
      | |-ImplicitCastExpr 0x359a7b8 <col:8> 'int' <LValueToRValue>
      | | `-DeclRefExpr 0x359a770 <col:8> 'int' lvalue Var 0x359a590 'y' 'int'
      | `-IntegerLiteral 0x359a798 <col:10> 'int' 2
      `-CompoundStmt 0x35e5f38 <col:12, line:9:1>
        |-BinaryOperator 0x35e5e18 <line:7:4, col:8> 'int' '='
        | |-DeclRefExpr 0x359a7f8 <col:4> 'int' lvalue Var 0x359a590 'y' 'int'
        | `-BinaryOperator 0x35e5df0 <col:6, col:8> 'int' '-'
        |   |-ImplicitCastExpr 0x359a868 <col:6> 'int' <LValueToRValue>
        |   | `-DeclRefExpr 0x359a820 <col:6> 'int' lvalue Var 0x359a590 'y' 'int'
        |   `-IntegerLiteral 0x359a848 <col:8> 'int' 1
        `-BinaryOperator 0x35e5f10 <line:8:4, col:8> 'int' '='
          |-DeclRefExpr 0x35e5e40 <col:4> 'int' lvalue Var 0x359a618 'x' 'int'
          `-BinaryOperator 0x35e5ee8 <col:6, col:8> 'int' '+'
            |-ImplicitCastExpr 0x35e5eb8 <col:6> 'int' <LValueToRValue>
            | `-DeclRefExpr 0x35e5e68 <col:6> 'int' lvalue Var 0x359a618 'x' 'int'
            `-ImplicitCastExpr 0x35e5ed0 <col:8> 'int' <LValueToRValue>
              `-DeclRefExpr 0x35e5e90 <col:8> 'int' lvalue Var 0x359a590 'y' 'int'
